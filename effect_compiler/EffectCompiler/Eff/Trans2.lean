
import EffectCompiler.Eff.Syntax
import EffectCompiler.Eff.Subst

import EffectCompiler.SystemFwithRecord.Basic

-- import EffectCompiler.Eff.SmallStep

import Lean.Elab.Tactic.LibrarySearch

namespace Eff

-- def ValTy.trans : ValTy ‚Üí SystemF.Ty .nil
--   | .bool => .bool
--   | .fn A ‚ü®B, E‚ü© => A.trans ‚áí
--     let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--     .pi ((.pair
--       (.fn A.trans{{œÅ'}}·µ£‚Çú (.var .zero))
--       (
--         let f := fun i =>
--           have : sizeOf (E.get i) < sizeOf E := sorry
--           let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--           .fn (E.get i).1.trans{{œÅ'}}·µ£‚Çú <| .fn (.fn (E.get i).2.trans{{œÅ'}}·µ£‚Çú (.var .zero)) (.var .zero)
--         .record f
--       )
--     ) ‚áí (.var .zero))
--   | .hn ((A, E), (B, E')) =>
--     let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--     let œÅ'' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--     let f := fun i =>
--       have : sizeOf (E.get i) < sizeOf E := sorry
--       let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--       SystemF.Ty.fn (E.get i).1.trans{{œÅ'}}·µ£‚Çú <| .fn (.fn (E.get i).2.trans{{œÅ'}}·µ£‚Çú B.trans) B.trans
--     let f' := fun i =>
--       have : sizeOf (E.get i) < sizeOf E := sorry
--       let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
--       SystemF.Ty.fn (E.get i).1.trans{{œÅ'}}·µ£‚Çú <| .fn (.fn (E.get i).2.trans{{œÅ'}}·µ£‚Çú (.var .zero)) (.var .zero)
--     .pair (.fn A.trans{{œÅ'}}·µ£‚Çú (.pi ((.pair (.fn B.trans{{œÅ''}}·µ£‚Çú (.var .zero)) (.record f')) ‚áí (.var .zero)))) (.record f)
--     -- HandlerTy.trans (A, E) (CmpTy.trans (B, E'))
-- decreasing_by
--   simp_arith
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_right
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_right
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_right
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp
--   apply Nat.lt_add_left
--   apply Nat.lt_add_right
--   apply Nat.lt_add_left
--   apply Nat.lt_add_left
--   trans
--   show _ < sizeOf (E.get i)
--   cases (E.get i)
--   simp_arith
--   assumption
--   simp_arith
--   simp_arith

mutual
def ValTy.trans: ValTy ‚Üí SystemF.Ty .nil
  | .bool => .bool
  | .fn A C => A.trans ‚áí CmpTy.trans C
  | .hn (C, D) =>
    HandlerTy.trans C (CmpTy.trans D)
termination_by v => sizeOf v
decreasing_by
  simp_arith
  simp_arith
  simp_arith
  cases C
  simp_arith

def CmpTy.trans: CmpTy ‚Üí SystemF.Ty .nil :=
  fun (A, E) => .pi ((HandlerTy.trans (A, E) (.var .zero)) ‚áí (.var .zero))
termination_by c => sizeOf c
decreasing_by
  simp

def HandlerTy.trans: CmpTy ‚Üí SystemF.Ty Œ¶ ‚Üí SystemF.Ty Œ¶ :=
  fun (A, E) B =>
  let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
  .pair (.fn A.trans{{œÅ'}}·µ£‚Çú B) (Signature.trans E B)
termination_by c => sizeOf c.1 + sizeOf c.2
decreasing_by
  simp_arith
  show 0 < _
  exact Signature.sizeOf_lemma _
  simp_arith
  show 0 < _
  exact ValTy.sizeOf_lemma _

def Signature.trans : (S : Context OpTy) ‚Üí SystemF.Ty Œ¶ ‚Üí SystemF.Ty Œ¶ :=
  fun S C =>
  let f := fun i =>
    have : sizeOf (S.get i) < sizeOf S := by sorry
    (S.get i).trans C
  .record f
termination_by S => sizeOf S

def OpTy.trans : OpTy ‚Üí SystemF.Ty Œ¶ ‚Üí SystemF.Ty Œ¶
  | (A, B), C =>
    let œÅ' : SystemF.Rename‚Çú _ .nil := SystemF.Rename‚Çú.nil
    .fn A.trans{{œÅ'}}·µ£‚Çú <| .fn (.fn B.trans{{œÅ'}}·µ£‚Çú C) C
termination_by op => sizeOf op
end

-- example : ValTy.bool.trans = SystemF.Ty.bool := rfl

def OpTy.trans_ren_lemma : (OpTy.trans op B){{œÅ'}}·µ£‚Çú = OpTy.trans op B{{œÅ'}}·µ£‚Çú := by
  rename_i Œ¶ Œ®
  cases op
  case mk A' B' =>
  simp [OpTy.trans, SystemF.Ty.rename‚Çú]
  constructor
  rw [‚ÜêSystemF.Rename‚Çú.ren_comp]
  generalize œÅ'.comp SystemF.Rename‚Çú.nil = œÅ''
  rw [SystemF.Rename‚Çú.nil_eta œÅ'']
  rw [‚ÜêSystemF.Rename‚Çú.ren_comp]
  generalize œÅ'.comp SystemF.Rename‚Çú.nil = œÅ''
  rw [SystemF.Rename‚Çú.nil_eta œÅ'']
def OpTy.trans_sub_lemma : (OpTy.trans op B){{œÉ'}}‚Çõ‚Çú = OpTy.trans op B{{œÉ'}}‚Çõ‚Çú := by
  rename_i Œ¶ Œ®
  cases op
  case mk A' B' =>
  simp [OpTy.trans, SystemF.Ty.subst‚Çú]
  constructor
  rw [SystemF.nil_ren_sub]
  rw [SystemF.nil_ren_sub]
def Signature.trans_ren_lemma : (Signature.trans S B){{œÅ'}}·µ£‚Çú = Signature.trans S B{{œÅ'}}·µ£‚Çú := by
  rename_i Œ¶ Œ®
  cases S with
  | nil =>
    simp [Signature.trans, SystemF.Ty.rename‚Çú]
    funext i
    exact Fin.elim0 i
  | cons S B =>
    simp [Signature.trans, SystemF.Ty.rename‚Çú]
    funext i
    apply OpTy.trans_ren_lemma
def Signature.trans_sub_lemma : (Signature.trans S B){{œÉ'}}‚Çõ‚Çú = Signature.trans S B{{œÉ'}}‚Çõ‚Çú := by
  rename_i Œ¶ Œ®
  cases S with
  | nil =>
    simp [Signature.trans, SystemF.Ty.subst‚Çú]
    funext i
    exact Fin.elim0 i
  | cons S B =>
    simp [Signature.trans, SystemF.Ty.subst‚Çú]
    funext i
    apply OpTy.trans_sub_lemma
def HandlerTy.trans_ren_lemma : (HandlerTy.trans (A, E) B){{œÅ'}}·µ£‚Çú = HandlerTy.trans (A, E) B{{œÅ'}}·µ£‚Çú := by
  simp [trans, SystemF.Ty.rename‚Çú]
  constructor
  rw [‚ÜêSystemF.Rename‚Çú.ren_comp]
  generalize œÅ'.comp SystemF.Rename‚Çú.nil = œÅ''
  rw [SystemF.Rename‚Çú.nil_eta œÅ'']
  apply Signature.trans_ren_lemma
def HandlerTy.trans_sub_lemma : (HandlerTy.trans (A, E) B){{œÉ'}}‚Çõ‚Çú = HandlerTy.trans (A, E) B{{œÉ'}}‚Çõ‚Çú := by
  simp [trans, SystemF.Ty.subst‚Çú]
  constructor
  rw [SystemF.nil_ren_sub]
  apply Signature.trans_sub_lemma
@[simp]
def Context.trans: Context ValTy ‚Üí SystemF.Con .nil
  | .nil => .nil
  | .cons Œì A => .cons (trans Œì) A.trans
notation: max "‚ü¶" t "‚üßv" => ValTy.trans t
notation: max "‚ü¶" t "‚üßv" => Context.trans t
notation: max "‚ü¶" t "‚üß‚áõ" t': max => HandlerTy.trans t t'
notation: max "‚ü¶" t "‚üßc" => CmpTy.trans t

-- def ret_cl : Œ¶ / Œî ‚ä¢ ‚ü¶C‚üß‚áõB ‚Üí Œ¶ / Œî ‚ä¢ SystemF.Ty.fn ‚ü¶C.val‚üßv{{œÅ'}}·µ£‚Çú B
--   | t => by
--     simp [HandlerTy.trans] at t
--     rw [SystemF.Rename‚Çú.nil_eta œÅ']
--     exact .p‚ÇÅ t
-- def Signature.op_cl : Œ¶ / Œî ‚ä¢ Signature.trans E B ‚Üí E ‚àã ‚ü®A', B'‚ü© ‚Üí Œ¶ / Œî ‚ä¢ .fn ‚ü¶A'‚üßv{{œÅ'}}·µ£‚Çú (.fn (.fn ‚ü¶B'‚üßv{{œÅ'}}·µ£‚Çú B) B)
--   | t, .zero => by
--     simp [Signature.trans, OpTy.trans] at t
--     rw [SystemF.Rename‚Çú.nil_eta œÅ']
--     exact .p‚ÇÅ t
--   | t, .succ i => by
--     simp [Signature.trans] at t
--     apply op_cl _ i
--     exact .p‚ÇÇ t

-- def op_cl : Œ¶ / Œî ‚ä¢ ‚ü¶C‚üß‚áõB ‚Üí C.eff ‚àã ‚ü®A', B'‚ü© ‚Üí Œ¶ / Œî ‚ä¢ .fn ‚ü¶A'‚üßv{{œÅ'}}·µ£‚Çú (.fn (.fn ‚ü¶B'‚üßv{{œÅ'}}·µ£‚Çú B) B)
--   | t, i => by
--     simp [HandlerTy.trans] at t
--     rw [SystemF.Rename‚Çú.nil_eta œÅ']
--     apply Signature.op_cl (.p‚ÇÇ t) i

def Member.trans : Member Œì A ‚Üí  ‚àÖ / ‚ü¶Œì‚üßv ‚àã ‚ü¶A‚üßv
  | .zero => .zero
  | .succ i => .succ <| Member.trans i

mutual

def Val.trans : Œì ‚ä¢v A ‚Üí ‚àÖ / ‚ü¶Œì‚üßv ‚ä¢
  | .var i => .var <| Member.trans i
  | .true => .true
  | .false => .false
  | .lam (C:=C) A e =>
    have : sizeOf e + 1 < 1 + sizeOf Œì + sizeOf C + sizeOf A + sizeOf e := by {
      simp_arith
      apply Nat.lt_add_left
      exact ValTy.sizeOf_lemma A
    }
    .lam ‚ü¶A‚üßv e.trans
  | .handler (A:=A) (E:=E) ret op (C:=C) =>
    have : sizeOf ret + 1 < 1 + sizeOf Œì + sizeOf A + sizeOf C + sizeOf E + sizeOf ret + sizeOf op := by {
        simp_arith
        show 0 < _
        apply Nat.lt_add_right
        apply Nat.lt_add_right
        apply Nat.lt_add_right
        apply Nat.lt_add_left
        apply ValTy.sizeOf_lemma
      }
    .pair (.lam _ ret.trans) (OpClauses.trans op)
termination_by v => sizeOf v
decreasing_by
  sorry
  sorry
  sorry

def Cmp.trans : Œì ‚ä¢c C ‚Üí ‚àÖ / ‚ü¶Œì‚üßv ‚ä¢
  | .app (A:=A') v‚ÇÅ v‚ÇÇ => .app v‚ÇÅ.trans v‚ÇÇ.trans
  | .handle_with (C:=(A, E)) c v => c.colon (ùüô·µ£_) ‚ü¶C‚üßc v.trans
  | c =>
    let œÅ' : SystemF.Rename‚Çú (.nil;*) .nil := .succ
    let œÅ : SystemF.Rename _ _ ((‚ü¶Œì‚üßv).wk; ‚ü¶C‚üß‚áõ(SystemF.Ty.var .zero)) ‚ü¶Œì‚üßv œÅ' := by  {
        intro T i
        apply SystemF.Con.Member.succ
        apply SystemF.Con.Member.rename‚Çú
        assumption
    }
    .lam‚Çú (.lam (‚ü¶C‚üß‚áõ(.var .zero)) (c.colon œÅ (.var .zero) (.var .zero)))
termination_by c => sizeOf c + 1

def Cmp.colon : Œì ‚ä¢c C ‚Üí (œÅ : SystemF.Rename Œ® _ Œî ‚ü¶Œì‚üßv œÅ‚Çú) ‚Üí (B : SystemF.Ty Œ®) ‚Üí Œ® / Œî ‚ä¢ ‚Üí Œ® / Œî ‚ä¢
  | .return (E:=E) v, œÅ, B, h => .app (.p‚ÇÅ h) (v.trans{{œÅ}}·µ£)
  | .op i (A':=A') (B':=B') v c, œÅ, B, h =>
    let œÅ'' : SystemF.Rename _ _ (Œî; ‚ü¶B'‚üßv{{œÅ‚Çú}}·µ£‚Çú) ‚ü¶Œì; B'‚üßv œÅ‚Çú :=
      fun {K} i =>
      match i with
      | .zero => .zero
      | .succ i => .succ (œÅ i)
    .app (.app (.proj (.p‚ÇÇ h) i.asFin) v.trans{{œÅ}}·µ£) (.lam _ (c.colon œÅ'' B h.wk))
  | .app (A:=A') v‚ÇÅ v‚ÇÇ, œÅ, B, h => .app (.app‚Çú (.app (v‚ÇÅ.trans{{œÅ}}·µ£) (v‚ÇÇ.trans{{œÅ}}·µ£)) B) h
  | .ifte v c‚ÇÅ c‚ÇÇ, œÅ, B, h => .ifte (v.trans.rename œÅ) (c‚ÇÅ.colon œÅ B h) (c‚ÇÇ.colon œÅ B h)
  | .handle_with (C:=C) (C':=C') c v, œÅ, B, h => .app (.app‚Çú (c.colon œÅ (‚ü¶C'‚üßc{{œÅ‚Çú}}·µ£‚Çú) (v.trans{{œÅ}}·µ£)) B) h
termination_by c => sizeOf c

def OpClauses.trans_aux : (S : OpClauses Œì E C) ‚Üí (Fin E.length) ‚Üí _ / ‚ü¶Œì‚üßv ‚ä¢
  | .nil => fun i => Fin.elim0 i
  | .cons (A:=A') (B:=B) (E:=E') S c =>
    fun i => i.cases (.lam _ (.lam _ c.trans)) (fun i => OpClauses.trans_aux S i)
termination_by S => sizeOf S
decreasing_by
  sorry
  sorry

def OpClauses.trans : OpClauses Œì E C ‚Üí _ / ‚ü¶Œì‚üßv ‚ä¢ :=
  fun S =>
  .record (OpClauses.trans_aux S)
termination_by S => sizeOf S + 1

end

def OpClauses.trans_aux_lemma : (S : OpClauses Œì E C) ‚Üí (i : E ‚àã (A, B)) ‚Üí S.trans_aux i.asFin = (.lam _ (.lam _ (S.get i).trans)) := by
  intro S i
  cases S with
  | nil => contradiction
  | cons S c =>
  cases i with
  | zero =>
    simp [trans_aux, Member.asFin]
    rfl
  | succ i =>
    simp [trans_aux, Fin.cases, Fin.induction, Fin.induction.go]
    apply trans_aux_lemma

mutual

def Val.preserve_type : (t : Œì ‚ä¢v A) ‚Üí SystemF.Extrinsic.Typing t.trans ‚ü¶A‚üßv
  | .var i => by
    simp [Val.trans]
    constructor
  | .true => by
    simp [Val.trans, ValTy.trans]
    constructor
  | .false => by
    simp [Val.trans, ValTy.trans]
    constructor
  | .lam B e (C:=C) => by
    simp [Val.trans, ValTy.trans]
    constructor
    apply Cmp.preserve_type
  | .handler ret op (A:=A) (E:=E) (C:=C) => by
    simp [Val.trans, ValTy.trans, HandlerTy.trans]
    constructor
    have : ‚ü¶A‚üßv{{SystemF.Rename‚Çú.nil}}·µ£‚Çú = ‚ü¶A‚üßv := by {
      rw [‚ÜêSystemF.Rename‚Çú.nil_eta (SystemF.Rename‚Çú.id), SystemF.Rename‚Çú.id_rfl]
    }
    rw [this]
    constructor
    apply Cmp.preserve_type
    apply OpClauses.preserve_type
termination_by v => sizeOf v
decreasing_by
  sorry
  sorry

def Cmp.preserve_type : (t : Œì ‚ä¢c C) ‚Üí SystemF.Extrinsic.Typing t.trans ‚ü¶C‚üßc
  | .return ret => by
    let (A, E) := C
    simp [Cmp.trans, CmpTy.trans]
    constructor
    constructor
    apply Cmp.colon_preserve_type
    constructor
  | .op i v c => by
    let (A, E) := C
    simp [Cmp.trans, CmpTy.trans]
    constructor
    constructor
    apply Cmp.colon_preserve_type
    constructor
  | .app v‚ÇÅ v‚ÇÇ => by
    simp [Cmp.trans]
    constructor
    have J := Val.preserve_type v‚ÇÅ
    simp [ValTy.trans] at J
    assumption
    apply Val.preserve_type v‚ÇÇ
  | .ifte b t e => by
    let (A, E) := C
    simp [Cmp.trans, CmpTy.trans]
    constructor
    constructor
    apply Cmp.colon_preserve_type
    constructor
  | .handle_with c v => by
    simp [Cmp.trans]
    apply Cmp.colon_preserve_type
    rw [‚ÜêValTy.trans]
    apply Val.preserve_type
termination_by c => sizeOf c + 1
decreasing_by
  sorry
  sorry
  sorry
  sorry
  sorry
  sorry
  sorry

def Cmp.colon_preserve_type : (t : Œì ‚ä¢c C) ‚Üí SystemF.Extrinsic.Typing h ‚ü¶C‚üß‚áõB ‚Üí  SystemF.Extrinsic.Typing (t.colon œÅ B h) B
  | .return ret, J => by
    rename_i Œ¶ Œî œÅ‚Çú
    let (A, E) := C
    simp [Cmp.colon]
    simp [HandlerTy.trans] at J
    constructor
    constructor
    assumption
    rw [‚ÜêSystemF.Rename‚Çú.nil_eta œÅ‚Çú]
    refine SystemF.Extrinsic.Typing.rename ?_ œÅ
    apply Val.preserve_type
  | .op i v c (A':=A') (B':=B'), J => by
    rename_i Œ¶ Œî œÅ‚Çú
    let (A, E) := C
    simp [Cmp.colon]
    constructor
    constructor
    simp [HandlerTy.trans, Signature.trans] at J
    have J' := SystemF.Extrinsic.Typing.p‚ÇÇ J
    have J'' := SystemF.Extrinsic.Typing.proj J' (i:=i.asFin)
    rw [Context.get_eq _ _] at J''
    simp [OpTy.trans] at J''
    assumption
    rw [‚ÜêSystemF.Rename‚Çú.nil_eta œÅ‚Çú]
    refine SystemF.Extrinsic.Typing.rename ?_ œÅ
    apply Val.preserve_type
    rw [‚ÜêSystemF.Rename‚Çú.nil_eta œÅ‚Çú]
    constructor
    apply Cmp.colon_preserve_type
    sorry
  | .app v‚ÇÅ v‚ÇÇ (A:=A), J => by
    rename_i Œ¶ Œî œÅ‚Çú
    let ‚ü®A', E‚ü© := C
    simp [Cmp.colon]
    simp [HandlerTy.trans] at J
    constructor
    have J‚ÇÅ := Val.preserve_type v‚ÇÅ
    have J‚ÇÇ := Val.preserve_type v‚ÇÇ
    have J‚ÇÅ' : SystemF.Extrinsic.Typing v‚ÇÅ.trans{{œÅ}}·µ£ _ := by {
      apply SystemF.Extrinsic.Typing.rename
      assumption
    }
    have J‚ÇÇ' : SystemF.Extrinsic.Typing v‚ÇÇ.trans{{œÅ}}·µ£ _ := by {
      apply SystemF.Extrinsic.Typing.rename
      assumption
    }
    simp [ValTy.trans, SystemF.Ty.rename‚Çú] at J‚ÇÅ J‚ÇÅ'
    have J' : SystemF.Extrinsic.Typing (.app v‚ÇÅ.trans{{œÅ}}·µ£ v‚ÇÇ.trans{{œÅ}}·µ£) _ := by {
      constructor
      assumption
      assumption
    }
    simp [CmpTy.trans, SystemF.Ty.rename‚Çú] at J'
    have J'' : SystemF.Extrinsic.Typing (.app‚Çú (.app v‚ÇÅ.trans{{œÅ}}·µ£ v‚ÇÇ.trans{{œÅ}}·µ£) B) _ := by {
      constructor
      assumption
    }
    simp [SystemF.Ty.subst‚Çú‚ÇÄ, SystemF.Ty.subst‚Çú, SystemF.Subst‚Çú.cons, SystemF.Rename‚Çú.extend] at J''
    assumption
    simp [HandlerTy.trans]
    simp [SystemF.Ty.rename‚Çú, SystemF.Ty.subst‚Çú]
    rw [Signature.trans_ren_lemma, Signature.trans_sub_lemma]
    simp [SystemF.Ty.rename‚Çú, SystemF.Rename‚Çú.extend, SystemF.Ty.subst‚Çú, SystemF.Subst‚Çú.cons]
    rw [‚ÜêSystemF.Subst‚Çú.subs_comp‚Çõ·µ£, SystemF.nil_ren_sub ‚ü¶A'‚üßv]
    assumption
  | .ifte b t e, J => by
    rename_i Œ¶ Œî œÅ‚Çú
    simp [Cmp.colon]
    constructor
    have : SystemF.Ty.bool = SystemF.Ty.bool{{œÅ‚Çú}}·µ£‚Çú := by simp [SystemF.Ty.rename‚Çú]
    rw [this]
    refine SystemF.Extrinsic.Typing.rename ?_ œÅ
    have : SystemF.Ty.bool = ‚ü¶.bool‚üßv := by simp [ValTy.trans]
    rw [this]
    apply Val.preserve_type
    apply Cmp.colon_preserve_type
    assumption
    apply Cmp.colon_preserve_type
    assumption
  | .handle_with c v, J => by
    let (A, E) := C
    simp [Cmp.colon]
    constructor
    rename_i œÅ‚Çú C'
    have J := @Cmp.colon_preserve_type _ _ _ _ (v.trans{{œÅ}}·µ£) ‚ü¶(A, E)‚üßc{{œÅ‚Çú}}·µ£‚Çú œÅ‚Çú œÅ c (by {
      rw [‚ÜêHandlerTy.trans_ren_lemma]
      apply SystemF.Extrinsic.Typing.rename
      rw [‚ÜêValTy.trans]
      apply Val.preserve_type v
    })
    simp [CmpTy.trans, SystemF.Extrinsic.Term.rename‚Çú] at J ‚ä¢
    have J' := SystemF.Extrinsic.Typing.app‚Çú J (B:=B)
    assumption
    rw [HandlerTy.trans_ren_lemma]
    simp [SystemF.Ty.rename‚Çú, SystemF.Rename‚Çú.extend]
    rw [HandlerTy.trans_sub_lemma]
    simp [SystemF.Ty.subst‚Çú, SystemF.Subst‚Çú.cons]
    assumption
termination_by c => sizeOf c

def OpClauses.preserve_type : (op : OpClauses Œì E C) ‚Üí SystemF.Extrinsic.Typing op.trans (Signature.trans E ‚ü¶C‚üßc) := sorry

end

def Relation.ReflTransGen.ofEq : a = b ‚Üí Relation.ReflTransGen f a b := by
  intro h
  rw [h]
def Sub.trans : Sub Œî Œì ‚Üí SystemF.Extrinsic.Subst ‚àÖ ‚àÖ ‚ü¶Œî‚üßv ‚ü¶Œì‚üßv := sorry

def trans_sub_comm : {t : Œì ‚ä¢v C} ‚Üí {œÉ : Sub Œî Œì} ‚Üí t{{œÉ}}‚Çõ.trans = t.trans.subst œÉ.trans ùüô·µ£‚Çú := by
  intro t œÉ
  sorry

def trans_colon_lemma : {t : (Œì; A) ‚ä¢c C} ‚Üí {v : Œì ‚ä¢v A} ‚Üí {œÅ : SystemF.Rename Œ® _ Œî ‚ü¶Œì‚üßv œÅ'}
  ‚Üí SystemF.Extrinsic.MultiStep0 (.app (.app‚Çú t.trans{{œÅ.extend}}·µ£[[v.trans{{œÅ}}·µ£]]‚Çõ B) h) (t[[v]]‚Çõ.colon œÅ B h) := by
  intro t v œÅ
  cases t with
  | app f x =>
    simp [Cmp.trans, SystemF.Extrinsic.Term.rename, SystemF.Extrinsic.Term.subst‚ÇÄ, SystemF.Extrinsic.Term.subst]
    simp [Cmp.subs‚ÇÄ, Cmp.subst, Cmp.colon]
    apply SystemF.Extrinsic.MultiStep0.Œæ_app‚ÇÅ
    apply SystemF.Extrinsic.MultiStep0.Œæ_app‚Çú
    rw [trans_sub_comm, trans_sub_comm]
    apply Relation.ReflTransGen.ofEq
    congr
    sorry
    sorry
  | _ => sorry


def trans.simulation_lemma‚ÇÅ : {i : E ‚àã (A', B')} ‚Üí {v : Œì' ‚ä¢v A'} ‚Üí {c : (Œì'; B') ‚ä¢c (A'', E)} ‚Üí {val : (Œì'; A'') ‚ä¢c C} ‚Üí {op : OpClauses Œì' E C} ‚Üí {œÅ : SystemF.Rename Œ¶ SystemF.Con‚Çú.nil Œî ‚ü¶Œì'‚üßv œÅ‚Çú}
  ‚Üí (handle Cmp.op i v c with Val.handler val op).colon œÅ B h ‚ü∂‚Çõ+
  (op.get i)[[Val.lam B' handle c{{((ùüô·µ£Œì').wk A')‚Üë}}·µ£with(Val.handler val op){{((ùüô·µ£Œì').wk A').wk B'}}·µ£]]‚Çõ[[v]]‚Çõ.colon œÅ B h := by
{
  intro i v c val op œÅ
  simp [Cmp.colon, Val.trans]
  simp [OpClauses.trans, SystemF.Extrinsic.Term.rename]
  apply Relation.TransGen.head'
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_proj
  apply SystemF.Extrinsic.SmallStep.Œ≤_p‚ÇÇ
  apply Relation.ReflTransGen.head
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œ≤_proj
  apply Relation.ReflTransGen.head
  rw [OpClauses.trans_aux_lemma]
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œ≤_app
  apply Relation.ReflTransGen.head
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
  apply SystemF.Extrinsic.SmallStep.Œ≤_app
  apply Relation.ReflTransGen.head
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
  apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
  apply SystemF.Extrinsic.SmallStep.Œ≤_app‚Çú
  -- cases E with
  -- | nil => contradiction
  -- | cons E a =>
  -- cases op with
  -- | cons S op =>
  -- simp [Cmp.colon, Val.trans]
  simp [OpClauses.trans_aux]
  -- cases i with
  -- | zero =>
  --   simp [Cmp.colon, Val.trans]
  --   cases op with
  --   | cons S op =>
  --     simp [OpClauses.get, OpClauses.trans, OpClauses.trans_aux, SystemF.Extrinsic.Term.rename, SystemF.Extrinsic.Term.wk]
  --     apply Relation.TransGen.head'
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     apply Relation.ReflTransGen.head
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     apply Relation.ReflTransGen.head
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     apply Relation.ReflTransGen.head
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  --     constructor
  -- | succ i => sorry
}

def trans.simulation {t t' : Œì ‚ä¢c A} : SmallStep t t' ‚Üí (t.colon œÅ B h ‚ü∂‚Çõ+ t'.colon œÅ B h) := by
  intro htt'
  induction htt' generalizing B h with
  | Œ≤_ifte_true =>
    simp [Cmp.colon, Val.trans]
    constructor
    constructor
  | Œ≤_ifte_false =>
    simp [Cmp.colon, Val.trans]
    constructor
    constructor
  | Œ≤_app =>
    simp [Cmp.colon, Val.trans, SystemF.Extrinsic.Term.rename]
    apply Relation.TransGen.head'
    apply SystemF.Extrinsic.SmallStep.Œæ_app‚ÇÅ
    apply SystemF.Extrinsic.SmallStep.Œæ_app‚Çú
    apply SystemF.Extrinsic.SmallStep.Œ≤_app
    apply trans_colon_lemma
  | Œæ_handle hcc' =>
    rename_i Œ¶ Œî œÅ‚Çú Œì' C A' E c c' ret op ih
    simp [Cmp.colon]
    refine SystemF.Extrinsic.MultiStep.Œæ_app‚ÇÅ ?Œæ_handle.a
    exact SystemF.Extrinsic.MultiStep.Œæ_app‚Çú ih
  | Œ≤_handle_return =>
    simp [Cmp.colon, ret_cl, Val.trans, SystemF.Extrinsic.Term.rename]
    apply Relation.TransGen.head
    constructor
    constructor
    constructor
    constructor
    apply Relation.TransGen.head'
    constructor
    constructor
    constructor
    apply trans_colon_lemma
  | Œ≤_handle_op =>
    rename_i Œ¶ Œî œÅ‚Çú E Œì' A' B' A'' C i v c val op
    simp [HAdd'.hAdd]
    simp [Cmp.colon, op_cl, Val.trans, SystemF.Extrinsic.Term.rename]
    cases i with
    | zero =>
      simp [Signature.op_cl]
      apply Relation.TransGen.head'
      constructor
      constructor
      constructor
      constructor
      constructor
      constructor
      constructor
      constructor
      cases op with
      | cons E op =>
        simp [OpClauses.trans, SystemF.Extrinsic.Term.rename]

    | succ i => sorry

end Eff
